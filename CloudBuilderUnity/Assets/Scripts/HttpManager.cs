// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using LitJson;

namespace CloudBuilderLibrary {

	public class HttpRequest {
		public enum Policy {
			AllErrors,
			NonpermanentErrors,
			Never,
		};

		public string BodyString {
			get { return body; }
			set { body = value; }
		}
		public JsonData BodyJson {
			set { body = JsonMapper.ToJson(value); }
		}
		public Action<HttpResponse> Callback;
		public bool HasBody {
			get { return body != null; }
		}
		public Dictionary<String, String> Headers = new Dictionary<string, string>();
		/**
		 * When not set (null), uses GET if no body is provided, or POST otherwise.
		 */
		public string Method;
		public Policy RetryPolicy = Policy.NonpermanentErrors;
		public string Url;
		public int TimeoutMillisec;

		private string body;
	}

	public class HttpResponse {
		public string BodyString {
			get { return body; }
			set { body = value; }
		}
		public Exception Exception;
		public bool HasBody {
			get { return body != null; }
		}
		public bool HasFailed {
			get { return Exception != null; }
		}
		public Dictionary<String, String> Headers = new Dictionary<string, string>();
		public string OriginalUrl;
		/** Returns whether this response is in an error state that should be retried according to the request configuration. */
		public bool ShouldBeRetried(HttpRequest request) {
			switch (request.RetryPolicy) {
			case HttpRequest.Policy.NonpermanentErrors:
				return HasFailed || StatusCode < 100 || (StatusCode >= 300 && StatusCode < 400) || StatusCode >= 500;
			case HttpRequest.Policy.AllErrors:
				return HasFailed || StatusCode < 100 || StatusCode >= 300;
			case HttpRequest.Policy.Never:
			default:
				return false;
			}
		}
		public int StatusCode;

		public HttpResponse() {}
		public HttpResponse(Exception e) { Exception = e; }

		private string body;
	}

	public class HttpTimeoutException: Exception {
	}
}

