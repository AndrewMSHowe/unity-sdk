// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Net;
using System.IO;
using System.Text;
using System.Threading;
using System.Collections.Generic;

namespace CloudBuilderLibrary
{
	public class UnityHttpClient: IHttpClient {
		#region IHttpClient implementation
		void IHttpClient.Run(HttpRequest request) {
			EnqueueRequest(request);
        }

		bool IHttpClient.VerboseMode {
			get { return verboseMode; }
			set { verboseMode = value; }
		}
		#endregion

		#region Private
		/**
		 * Asynchronous request state.
		 */
		private class RequestState {
			// This class stores the State of the request.
			public const int BufferSize = 1024;
			public StringBuilder requestData;
			public byte[] BufferRead;
			public HttpRequest originalRequest;
			public HttpWebRequest request;
			public HttpWebResponse response;
			public Stream streamResponse;
			public UnityHttpClient self;
			public RequestState(UnityHttpClient inst, HttpRequest originalReq, HttpWebRequest req) {
				self = inst;
				BufferRead = new byte[BufferSize];
				originalRequest = originalReq;
				requestData = new StringBuilder("");
				request = req;
				streamResponse = null;
			}
		}

		private void ChooseLoadBalancer() {
			currentLoadBalancerId = random.Next(1, CloudBuilder.Clan.LoadBalancerCount + 1);
		}

		/** Enqueues a request to make it processed asynchronously. Will potentially wait for the other requests enqueued to finish. */
		private void EnqueueRequest(HttpRequest req) {
			// On the first time, choose a load balancer
			if (currentLoadBalancerId == -1) {
				ChooseLoadBalancer();
			}
			lock (this) {
				// Need to enqueue process?
				if (isProcessingRequest) {
					pendingRequests.Add(req);
					return;
				}
				isProcessingRequest = true;
			}
			// Or start immediately
			currentRequestTryCount = 0;
			ProcessRequest(req);
		}

		/** Called after an HTTP request has been processed in any way (error or failure). Decides what to do next. */
		private void FinishWithRequest(HttpRequest request, HttpResponse response) {
			// IDEA This function could probably be moved to another file with a little gymnastic…
			HttpRequest nextReq;
			// Avoid timeout to be triggered after that
			allDone.Set();
			// Has failed?
			if (response.ShouldBeRetried(request))  {
				// Will try again
				if (currentRequestTryCount < timeBetweenRequestTries.Length) {
					CloudBuilder.Log(LogLevel.Warning, "[" + requestCount + "] Request failed, retrying in " + timeBetweenRequestTries[currentRequestTryCount] + "ms.");
					Thread.Sleep(timeBetweenRequestTries[currentRequestTryCount]);
					currentRequestTryCount += 1;
					ChooseLoadBalancer();
					ProcessRequest(request);
					return;
				}
				// Maximum failure count reached, will simply process the next request
				CloudBuilder.Log(LogLevel.Warning, "[" + requestCount + "] Request failed too many times, giving up.");
				currentRequestTryCount = timeBetweenRequestTries.Length - 1;
			}
			else {
				// Success
				currentRequestTryCount = 0;
			}
			// Final result for this request
			request.Callback(response);
			
			// Process next request
			lock (this) {
				// Note: currently another request is only launched after synchronously processed by the callback. This behavior is slower but might be safer.
				if (pendingRequests.Count == 0) {
					isProcessingRequest = false;
					return;
				}
				nextReq = pendingRequests[0];
				pendingRequests.RemoveAt(0);
			}
			ProcessRequest(nextReq);
		}

		/** Got a network stream to write to. */
		private void GetRequestStreamCallback(IAsyncResult asynchronousResult) {
            RequestState state = asynchronousResult.AsyncState as RequestState;
			try {
                // End the operation
				Stream postStream = state.request.EndGetRequestStream(asynchronousResult);
				// Convert the string into a byte array. 
				byte[] byteArray = Encoding.UTF8.GetBytes(state.originalRequest.BodyString);
				// Write to the request stream.
				postStream.Write(byteArray, 0, byteArray.Length);
				postStream.Close();
				// Start the asynchronous operation to get the response
	            state.request.BeginGetResponse(new AsyncCallback(RespCallback), state);
			}
			catch (WebException e) {
				CloudBuilder.Log(LogLevel.Warning, "Failed to send data: " + e.Message + ", status=" + e.Status);
				if (e.Status != WebExceptionStatus.RequestCanceled) {
					FinishWithRequest(state.originalRequest, new HttpResponse(e));
				}
			}
        }
		        
        /** Prints the current request for user convenience. */
        private void LogRequest(HttpRequest originalReq, HttpWebRequest request) {
			if (!verboseMode) { return; }

			StringBuilder sb = new StringBuilder();
			sb.AppendLine("[" + requestCount + "] " + request.Method + "ing on " + request.RequestUri);
			sb.AppendLine("Headers:");
			foreach (string key in request.Headers) {
				sb.AppendLine("\t" + key + ": " + request.Headers[key]);
			}
			if (originalReq.HasBody) {
				sb.AppendLine("Body: " + originalReq.BodyString);
			}
			CloudBuilder.Log(sb.ToString());
		}

		/** Prints information about the response for debugging purposes. */
		private void LogResponse(HttpWebRequest req, HttpResponse response) {
			if (!verboseMode) { return; }

			StringBuilder sb = new StringBuilder();
			sb.AppendLine("[" + requestCount + "] " + response.StatusCode + " on " + req.Method + "ed on " + req.RequestUri);
			sb.AppendLine("Recv. headers:");
			foreach (var pair in response.Headers) {
				sb.AppendLine("\t" + pair.Key + ": " + pair.Value);
			}
			if (response.HasBody) {
				sb.AppendLine("Body: " + response.BodyString);
			}
			CloudBuilder.Log(sb.ToString());
		}

		/** Processes a single request asynchronously. Will continue to FinishWithRequest in some way. */
		private void ProcessRequest(HttpRequest request) {
			// Configure & perform the request
			String url = request.Url.Replace("[id]", currentLoadBalancerId.ToString("00"));
			HttpWebRequest req = HttpWebRequest.Create(url) as HttpWebRequest;
			requestCount += 1;
			
			// Auto choose HTTP method
			req.Method = request.Method ?? (request.BodyString != null ? "POST" : "GET");
			req.UserAgent = "TEMP-TODO-UA";
			foreach (var pair in request.Headers) {
				req.Headers[pair.Key] = pair.Value;
			}

			RequestState state = new RequestState(this, request, req);
			allDone.Reset();
            if (request.BodyString != null) {
				req.BeginGetRequestStream(new AsyncCallback(GetRequestStreamCallback), state);
			}
			else {
				req.BeginGetResponse(new AsyncCallback(RespCallback), state);
			}
			LogRequest(request, req);
			// Setup timeout
			long timeout = CloudBuilder.Clan.HttpTimeoutMillis;
			ThreadPool.RegisterWaitForSingleObject(allDone, new WaitOrTimerCallback(TimeoutCallback), state, timeout, true);
        }

		/** Called when a response has been received by the HttpWebRequest. */
		private void RespCallback(IAsyncResult asynchronousResult) {  
			RequestState state = asynchronousResult.AsyncState as RequestState;
			try {
				// State of request is asynchronous.
				HttpWebRequest req = state.request;
				state.response = req.EndGetResponse(asynchronousResult) as HttpWebResponse;
				
				// Read the response into a Stream object.
				Stream responseStream = state.response.GetResponseStream();
				state.streamResponse = responseStream;
				// Begin reading the contents of the page
				responseStream.BeginRead(state.BufferRead, 0, RequestState.BufferSize, new AsyncCallback(ReadCallBack), state);
				return;
			}
			catch (WebException e) {
				// When there is a ProtocolError or such (HTTP code 4xx…), there is also a response associated, so read it anyway.
				state.response = e.Response as HttpWebResponse;
				Stream responseStream = state.response.GetResponseStream();
				state.streamResponse = responseStream;
				responseStream.BeginRead(state.BufferRead, 0, RequestState.BufferSize, new AsyncCallback(ReadCallBack), state);
				return;
			}
			catch (Exception e) {
				CloudBuilder.Log(LogLevel.Warning, "Failed to get response: " + e.Message);
				FinishWithRequest(state.originalRequest, new HttpResponse(e));
			}
			if (state.response != null) { state.response.Close(); }
			allDone.Set();
		}

		/** Reads the response buffer little by little. */
		private void ReadCallBack(IAsyncResult asyncResult) {
			RequestState state = asyncResult.AsyncState as RequestState;
			CloudBuilder.TEMP ("Read callback");
			try {
				Stream responseStream = state.streamResponse;
				int read = responseStream.EndRead(asyncResult);
				// Read the HTML page and then print it to the console. 
				if (read > 0) {
					state.requestData.Append(Encoding.UTF8.GetString(state.BufferRead, 0, read));
					responseStream.BeginRead(state.BufferRead, 0, RequestState.BufferSize, new AsyncCallback(ReadCallBack), state);
					return;
				}
				else {
					// Finished reading
					responseStream.Close();

					HttpResponse result = new HttpResponse();
					HttpWebResponse response = state.response;
					result.StatusCode = (int) response.StatusCode;
					foreach (string key in response.Headers) {
						result.Headers[key] = response.Headers[key];
					}
					// Read the body
					result.BodyString = state.requestData.ToString();
					// Logging
					LogResponse(state.request, result);
					FinishWithRequest(state.originalRequest, result);
				}
			}
			catch (Exception e) {
				CloudBuilder.Log(LogLevel.Warning, "Failed to read response: " + e.Message);
				FinishWithRequest(state.originalRequest, new HttpResponse(e));
			}
			allDone.Set();
		}

		/** Called upon timeout. */
		private static void TimeoutCallback(object state, bool timedOut) { 
			if (timedOut) {
				RequestState requestState = state as RequestState;
				if (requestState.request != null) {
					requestState.request.Abort();
				}
				HttpResponse response = new HttpResponse(new HttpTimeoutException());
				CloudBuilder.Log (LogLevel.Warning, "Request timed out");
				requestState.self.FinishWithRequest(requestState.originalRequest, response);
			}
		}

		// Request processing
		private ManualResetEvent allDone = new ManualResetEvent(false);
		private bool isProcessingRequest = false;
		private List<HttpRequest> pendingRequests = new List<HttpRequest>();
		// Others
		private bool verboseMode;
		private int currentRequestTryCount = 0, currentLoadBalancerId = -1;
		private readonly int[] timeBetweenRequestTries = {1, 100, 1000, 1500, 2000, 3000, 4000, 6000, 8000};
		private System.Random random = new System.Random();
		private int requestCount = 0;
		#endregion
	}
}
